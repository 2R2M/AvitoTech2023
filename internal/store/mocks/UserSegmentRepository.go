// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	model "avitoTech/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserSegmentRepository is an autogenerated mock type for the UserSegmentRepository type
type UserSegmentRepository struct {
	mock.Mock
}

// AddUsersSegment provides a mock function with given fields: ctx, operation
func (_m *UserSegmentRepository) AddUsersSegment(ctx context.Context, operation *model.Operation) (*model.Operation, error) {
	ret := _m.Called(ctx, operation)

	var r0 *model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) (*model.Operation, error)); ok {
		return rf(ctx, operation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) *model.Operation); ok {
		r0 = rf(ctx, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Operation) error); ok {
		r1 = rf(ctx, operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegment provides a mock function with given fields: ctx, segment
func (_m *UserSegmentRepository) CreateSegment(ctx context.Context, segment *model.Segment) (*model.Segment, error) {
	ret := _m.Called(ctx, segment)

	var r0 *model.Segment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Segment) (*model.Segment, error)); ok {
		return rf(ctx, segment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Segment) *model.Segment); ok {
		r0 = rf(ctx, segment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Segment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Segment) error); ok {
		r1 = rf(ctx, segment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserSegmentRepository) CreateUser(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegment provides a mock function with given fields: ctx, slug
func (_m *UserSegmentRepository) DeleteSegment(ctx context.Context, slug string) error {
	ret := _m.Called(ctx, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserSegmentRepository) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUsersSegment provides a mock function with given fields: ctx, operation
func (_m *UserSegmentRepository) DeleteUsersSegment(ctx context.Context, operation *model.Operation) (*model.Operation, error) {
	ret := _m.Called(ctx, operation)

	var r0 *model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) (*model.Operation, error)); ok {
		return rf(ctx, operation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) *model.Operation); ok {
		r0 = rf(ctx, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Operation) error); ok {
		r1 = rf(ctx, operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReport provides a mock function with given fields: ctx, month, year
func (_m *UserSegmentRepository) GetReport(ctx context.Context, month string, year string) ([]byte, error) {
	ret := _m.Called(ctx, month, year)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, month, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, month, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, month, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersSegments provides a mock function with given fields: ctx, id
func (_m *UserSegmentRepository) GetUsersSegments(ctx context.Context, id string) ([]*model.Segment, error) {
	ret := _m.Called(ctx, id)

	var r0 []*model.Segment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Segment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Segment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Segment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserSegmentRepository creates a new instance of UserSegmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserSegmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserSegmentRepository {
	mock := &UserSegmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
